
Submission time Thu-20-Nov 23:14:22
Raw Score 66.50 / 100.00
Feedback  See the Assessment Guide for information on how to read this report.
Assessment Summary

Compilation:  PASSED
Style:        FAILED
Findbugs:     No potential bugs found.
API:          PASSED

Correctness:  21/35 tests passed
Memory:       1/4 tests passed
Timing:       16/16 tests passed

Aggregate score: 66.50% [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]

Assessment Details

The following files were submitted:
----------------------------------
total 44K
-rw-r--r-- 1 1.9K Nov 21 07:15 Outcast.java
-rw-r--r-- 1  11K Nov 21 07:15 SAP.java
-rw-r--r-- 1  14K Nov 21 07:15 WordNet.java
-rw-r--r-- 1 9.1K Nov 21 07:15 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac SAP.java
*-----------------------------------------------------------
================================================================

% javac WordNet.java
*-----------------------------------------------------------
================================================================

% javac Outcast.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
SAP.java:180:26: ',' is not followed by whitespace.
SAP.java:192:28: ',' is not followed by whitespace.
SAP.java:207:13: '(' is followed by whitespace.
SAP.java:208:13: '(' is followed by whitespace.
SAP.java:212:75: ',' is not followed by whitespace.
SAP.java:213:75: ',' is not followed by whitespace.
SAP.java:216:12: 'for' is not followed by whitespace.
SAP.java:216:13: '(' is followed by whitespace.
SAP.java:216:19: '=' is not preceded with whitespace.
SAP.java:216:20: '=' is not followed by whitespace.
SAP.java:216:24: '<' is not preceded with whitespace.
SAP.java:216:25: '<' is not followed by whitespace.
SAP.java:220:48: ',' is not followed by whitespace.
SAP.java:223:13: '(' is followed by whitespace.
SAP.java:240:13: '(' is followed by whitespace.
SAP.java:241:13: '(' is followed by whitespace.
SAP.java:245:75: ',' is not followed by whitespace.
SAP.java:246:75: ',' is not followed by whitespace.
SAP.java:248:19: '=' is not preceded with whitespace.
SAP.java:248:20: '=' is not followed by whitespace.
SAP.java:248:24: '<' is not preceded with whitespace.
SAP.java:251:21: '(' is followed by whitespace.
SAP.java:251:40: ')' is preceded with whitespace.
SAP.java:257:13: '(' is followed by whitespace.
SAP.java:257:45: ')' is preceded with whitespace.
WordNet.java:119:31: ',' is not followed by whitespace.
WordNet.java:120:30: ',' is not followed by whitespace.
WordNet.java:124:39: ',' is not followed by whitespace.
WordNet.java:132:18: Declaring variables, return values or parameters of type 'Integer' is not allowed.
WordNet.java:147:13: 'numSynsets' hides a field.
WordNet.java:162:32: ',' is not followed by whitespace.
WordNet.java:193:30: '<' is not preceded with whitespace.
WordNet.java:193:31: '<' is not followed by whitespace.
WordNet.java:227:5: Constructor definition in wrong order.
WordNet.java:229:39: ',' is not followed by whitespace.
WordNet.java:230:42: ',' is not followed by whitespace.
WordNet.java:233:35: ',' is not followed by whitespace.
WordNet.java:261:47: ',' is not followed by whitespace.
WordNet.java:278:42: ',' is not followed by whitespace.
WordNet.java:279:81: ',' is not followed by whitespace.
WordNet.java:282:84: ',' is not followed by whitespace.
Outcast.java:37:19: '=' is not preceded with whitespace.
Outcast.java:37:20: '=' is not followed by whitespace.
Outcast.java:37:24: '<' is not preceded with whitespace.
Outcast.java:37:25: '<' is not followed by whitespace.
Outcast.java:39:20: Name 'Ai' must match pattern '^[a-z][a-zA-Z0-9]*$|^[A-Z][A-Z_0-9]*$'.
Outcast.java:41:21: '(' is followed by whitespace.
Outcast.java:41:28: ')' is preceded with whitespace.
Outcast.java:42:43: ',' is not followed by whitespace.
Outcast.java:45:17: '(' is followed by whitespace.
================================================================


% findbugs *.class
*-----------------------------------------------------------
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
SAP:

WordNet:

Outcast:

================================================================


******************************************************************************
*  correctness
******************************************************************************

Testing methods in SAP
*-----------------------------------------------------------
Running 19 total tests.

Test 1: test length() and ancestor() on fixed digraphs
  *  digraph1.txt
  *  digraph2.txt
  *  digraph3.txt
  *  digraph4.txt
  *  digraph5.txt
  *  digraph6.txt
==> passed

Test 2: check length() and ancestor() on WordNet digraph
  *  100 random vertex pairs in digraph-wordnet.txt
==> passed

Test 3: check length() and ancestor() on directed paths
  *  5
  *  10
  *  20
  *  50
  *  100
==> passed

Test 4: check length() and ancestor() on directed cycles
  *  5
  *  10
  *  20
  *  50
  *  100
==> passed

Test 5: check length() and ancestor() on complete graphs
  *  5
  *  10
  *  20
  *  50
==> passed

Test 6: check length() and ancestor() on tournament digraphs
  *  5
  *  10
  *  20
  *  50
==> passed

Test 7: check length() and ancestor() on complete binary trees
  *  5
  *  10
  *  20
  *  50
  *  100
==> passed

Test 8: check length() and ancestor() on random DAGs
  *  5 vertices, 8 edges
  *  10 vertices, 40 edges
  *  20 vertices, 100 edges
==> passed

Test 9: check length() and ancestor() on random rooted-in DAGs
  *  5 vertices, 8 edges
  *  10 vertices, 40 edges
  *  20 vertices, 100 edges
==> passed

Test 10: check length() and ancestor() on random rooted-out DAGs
  *  5 vertices, 8 edges
  *  10 vertices, 40 edges
  *  20 vertices, 100 edges
==> passed

Test 11: check length() and ancestor() on random rooted-in trees
  *  5 vertices
  *  10 vertices
  *  20 vertices
==> passed

Test 12: check length() and ancestor() on random rooted-out trees
  *  5 vertices
  *  10 vertices
  *  20 vertices
==> passed

Test 13: check length() and ancestor() on random simple digraphs
  *  5 vertices, 8 edges
  *  10 vertices, 40 edges
  *  20 vertices, 100 edges
==> passed

Test 14: check whether two SAP objects can be created at the same time
  *  digraph1.txt and digraph2.txt
  *  digraph3.txt and digraph4.txt
  *  digraph5.txt and digraph6.txt
  *  digraph2.txt and digraph1.txt
==> passed

Test 15: check whether SAP is immutable
  *  digraph1.txt
  *  digraph2.txt
  *  digraph3.txt
  *  digraph4.txt
  *  digraph5.txt
  *  digraph6.txt
  *  digraph-ambiguous-ancestor.txt
==> passed

Test 16: test invalid arguments to length() and ancestor() in digraph1.txt
  *  v = -1, w = 0
  *  v = 0, w = -1
  *  v = 13, w = 0
  *  v = 0, w = 13
  *  v = -1 2 7 , w = 1 4 6 10 11 
  *  v = 2 7 , w = -1 1 4 6 10 11 
  *  v = 13 2 7 , w = 1 4 6 10 11 
  *  v = 2 7 , w = 13 1 4 6 10 11 
==> passed

Test 17: test length() and ancestor() with Iterable arguments
  *  100 random subsets of 1 and 1 vertices in digraph-wordnet.txt
  *  100 random subsets of 1 and 2 vertices in digraph-wordnet.txt
  *  100 random subsets of 2 and 1 vertices in digraph-wordnet.txt
  *  100 random subsets of 2 and 2 vertices in digraph-wordnet.txt
  *  100 random subsets of 3 and 11 vertices in digraph-wordnet.txt
  *  100 random subsets of 11 and 3 vertices in digraph-wordnet.txt
  *  100 random subsets of 0 and 5 vertices in digraph-wordnet.txt
  *  100 random subsets of 5 and 0 vertices in digraph-wordnet.txt
  *  100 random subsets of 0 and 0 vertices in digraph-wordnet.txt
==> passed

Test 18: Check Iterable version of length() and ancestor() with null arguments
==> passed

Test 19: random calls to length() and ancestor(), with probabilities
         p1 and p2, respectively
  *  random calls in a random rooted DAG (20 vertices, 100 edges)
     (p1 = 0.5, p2 = 0.5)
  *  random calls in a random digraph (20 vertices, 100 edges)
     (p1 = 0.5, p2 = 0.5)
==> passed


Total: 19/19 tests passed!

================================================================

******************************************************************************
*  correctness (substituting reference SAP.java)
******************************************************************************

Testing methods in WordNet
*-----------------------------------------------------------
Running 14 total tests.

Test 1: test distance() of random noun pairs
  *  1000 pairs using synsets = synsets.txt; hypernyms = hypernyms.txt
==> passed

Test 2: test distance() of all noun pairs
  *  synsets = synsets15.txt; hypernyms = hypernyms15Path.txt
     -  failed on pair 0
     java.lang.IllegalArgumentException: Unable to find root.
     WordNet.importHypernyms(WordNet.java:206)
     WordNet.<init>(WordNet.java:233)
     TestWordNet.testAllDistance(TestWordNet.java:51)
     TestWordNet.test2(TestWordNet.java:92)
     TestWordNet.main(TestWordNet.java:758)

  *  synsets = synsets15.txt; hypernyms = hypernyms15Tree.txt
     -  failed on pair 0
     java.lang.IllegalArgumentException: Unable to find root.
     WordNet.importHypernyms(WordNet.java:206)
     WordNet.<init>(WordNet.java:233)
     TestWordNet.testAllDistance(TestWordNet.java:51)
     TestWordNet.test2(TestWordNet.java:93)
     TestWordNet.main(TestWordNet.java:758)

  *  synsets = synsets6.txt; hypernyms = hypernyms6TwoAncestors.txt
     -  failed on pair 0
     java.lang.IllegalArgumentException: Unable to find root.
     WordNet.importHypernyms(WordNet.java:206)
     WordNet.<init>(WordNet.java:233)
     TestWordNet.testAllDistance(TestWordNet.java:51)
     TestWordNet.test2(TestWordNet.java:94)
     TestWordNet.main(TestWordNet.java:758)

  *  synsets = synsets11.txt; hypernyms = hypernyms11AmbiguousAncestor.txt
     -  failed on pair 0
     java.lang.IllegalArgumentException: Unable to find root.
     WordNet.importHypernyms(WordNet.java:206)
     WordNet.<init>(WordNet.java:233)
     TestWordNet.testAllDistance(TestWordNet.java:51)
     TestWordNet.test2(TestWordNet.java:95)
     TestWordNet.main(TestWordNet.java:758)

  *  synsets = synsets8.txt; hypernyms = hypernyms8ModTree.txt
     -  failed on pair 0
     java.lang.IllegalArgumentException: Unable to find root.
     WordNet.importHypernyms(WordNet.java:206)
     WordNet.<init>(WordNet.java:233)
     TestWordNet.testAllDistance(TestWordNet.java:51)
     TestWordNet.test2(TestWordNet.java:96)
     TestWordNet.main(TestWordNet.java:758)

  *  synsets = synsets8.txt; hypernyms = hypernyms8WrongBFS.txt
     -  failed on pair 0
     java.lang.IllegalArgumentException: Unable to find root.
     WordNet.importHypernyms(WordNet.java:206)
     WordNet.<init>(WordNet.java:233)
     TestWordNet.testAllDistance(TestWordNet.java:51)
     TestWordNet.test2(TestWordNet.java:97)
     TestWordNet.main(TestWordNet.java:758)

  *  synsets = synsets11.txt; hypernyms = hypernyms11ManyPathsOneAncestor.txt
     -  failed on pair 0
     java.lang.IllegalArgumentException: Unable to find root.
     WordNet.importHypernyms(WordNet.java:206)
     WordNet.<init>(WordNet.java:233)
     TestWordNet.testAllDistance(TestWordNet.java:51)
     TestWordNet.test2(TestWordNet.java:98)
     TestWordNet.main(TestWordNet.java:758)

  *  synsets = synsets8.txt; hypernyms = hypernyms8ManyAncestors.txt
     -  failed on pair 0
     java.lang.IllegalArgumentException: Unable to find root.
     WordNet.importHypernyms(WordNet.java:206)
     WordNet.<init>(WordNet.java:233)
     TestWordNet.testAllDistance(TestWordNet.java:51)
     TestWordNet.test2(TestWordNet.java:99)
     TestWordNet.main(TestWordNet.java:758)

==> FAILED

Test 3: test distance() of random noun pairs
  *  1000 pairs using synsets = synsets100-subgraph.txt; hypernyms = hypernyms100-subgraph.txt
     -  failed on pair 1 of 1000
     java.lang.IllegalArgumentException: Unable to find root.
     WordNet.importHypernyms(WordNet.java:206)
     WordNet.<init>(WordNet.java:233)
     TestWordNet.testRandomDistance(TestWordNet.java:12)
     TestWordNet.test3(TestWordNet.java:108)
     TestWordNet.main(TestWordNet.java:759)

  *  1000 pairs using synsets = synsets500-subgraph.txt; hypernyms = hypernyms500-subgraph.txt
     -  failed on pair 1 of 1000
     java.lang.IllegalArgumentException: Unable to find root.
     WordNet.importHypernyms(WordNet.java:206)
     WordNet.<init>(WordNet.java:233)
     TestWordNet.testRandomDistance(TestWordNet.java:12)
     TestWordNet.test3(TestWoException in thread "main" java.lang.IllegalArgumentException: Unable to find root.
  at WordNet.importHypernyms(WordNet.java:206)
  at WordNet.<init>(WordNet.java:233)
  at TestWordNet.testAllSAP(TestWordNet.java:219)
  at TestWordNet.test5(TestWordNet.java:264)
  at TestWordNet.main(TestWordNet.java:761)
rdNet.java:109)
     TestWordNet.main(TestWordNet.java:759)

  *  1000 pairs using synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
     -  failed on pair 1 of 1000
     java.lang.IllegalArgumentException: Unable to find root.
     WordNet.importHypernyms(WordNet.java:206)
     WordNet.<init>(WordNet.java:233)
     TestWordNet.testRandomDistance(TestWordNet.java:12)
     TestWordNet.test3(TestWordNet.java:110)
     TestWordNet.main(TestWordNet.java:759)

==> FAILED

Test 4: test sap() of random noun pairs
  *  1000 pairs using synsets = synsets.txt; hypernyms = hypernyms.txt
==> passed

Test 5: test sap() of all noun pairs
  *  synsets = synsets15.txt; hypernyms = hypernyms15Path.txt

Total: 0/14 tests passed:Test aborted. Ran out of time or crashed before completion.
================================================================

******************************************************************************
*  correctness (substituting reference SAP.java and WordNet.java)
******************************************************************************

Testing methods in Outcast
*-----------------------------------------------------------
Running 2 total tests.

Test 1: test outcast() on WordNet digraph
        (synsets = synsets.txt; hypernyms = hypernyms.txt)
  *  outcast2.txt
  *  outcast3.txt
  *  outcast4.txt
  *  outcast5.txt
  *  outcast5a.txt
  *  outcast7.txt
  *  outcast8.txt
  *  outcast8a.txt
  *  outcast8b.txt
  *  outcast8c.txt
  *  outcast9.txt
  *  outcast9a.txt
  *  outcast10.txt
  *  outcast10a.txt
  *  outcast11.txt
  *  outcast12.txt
  *  outcast12a.txt
  *  outcast17.txt
  *  outcast20.txt
  *  outcast29.txt
==> passed

Test 2: test outcast() on WordNet subgraph
        (synsets = synsets50000-subgraph.txt; hypernyms = hypernyms50000-subgraph.txt)
  *  outcast2.txt
  *  outcast3.txt
  *  outcast5.txt
  *  outcast5a.txt
  *  outcast7.txt
  *  outcast8.txt
  *  outcast8b.txt
  *  outcast8c.txt
  *  outcast9.txt
  *  outcast10.txt
  *  outcast11.txt
==> passed


Total: 2/2 tests passed!

================================================================

******************************************************************************
*  memory
******************************************************************************

Computing memory of SAP
*-----------------------------------------------------------
Running 1 total tests.

student     memory    = 8019944 bytes
reference   memory    = 8019944 bytes
ratio                 = 1.00
maximum allowed ratio = 2.50

vertices = 82192
edges    = 84505

Total: 1/1 tests passed!

================================================================



Computing memory of WordNet
*-----------------------------------------------------------
java.lang.IllegalArgumentException: Unable to find root.
  at WordNet.importHypernyms(WordNet.java:206)
  at WordNet.<init>(WordNet.java:233)
  at MemoryOfWordNet.testMemory(MemoryOfWordNet.java:16)
  at MemoryOfWordNet.test1a(MemoryOfWordNet.java:44)
  at MemoryOfWordNet.main(MemoryOfWordNet.java:72)
java.lang.IllegalArgumentException: Unable to find root.
  at WordNet.importHypernyms(WordNet.java:206)
  at WordNet.<init>(WordNet.java:233)
  at MemoryOfWordNet.testMemory(MemoryOfWordNet.java:16)
  at MemoryOfWordNet.test1b(MemoryOfWordNet.java:50)
  at MemoryOfWordNet.main(MemoryOfWordNet.java:73)
java.lang.IllegalArgumentException: Unable to find root.
  at WordNet.importHypernyms(WordNet.java:206)
  at WordNet.<init>(WordNet.java:233)
  at MemoryOfWordNet.testMemory(MemoryOfWordNet.java:16)
  at MemoryOfWordNet.test1c(MemoryOfWordNet.java:56)
  at MemoryOfWordNet.main(MemoryOfWordNet.java:74)
Running 3 total tests.

Test 1a: test memory of WordNet object
  *  synsets = synsets1000-subgraph.txt; hypernyms = hypernyms1000-subgraph.txt
==> FAILED

Test 1b: test memory of WordNet object
  *  synsets = synsets5000-subgraph.txt; hypernyms = hypernyms5000-subgraph.txt
==> FAILED

Test 1c: test memory of WordNet object
  *  synsets = synsets10000-subgraph.txt; hypernyms = hypernyms10000-subgraph.txt
==> FAILED

Total: 0/3 tests passed!

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing SAP
*-----------------------------------------------------------
Running 7 total tests.

Test 1: time SAP constructor
   *  digraph-wordnet.txt
      -  student solution time =  0.11 seconds
      -  maximum allowed  time =  1.00 seconds
==> passed

Test 2a-c: time length() and ancestor() with random pairs of vertices
  *  digraph-wordnet.txt
     -  reference solution calls per second:  171641.33
     -  student   solution calls per second:    1492.67
     -  reference / student ratio:               114.99

=> passed    student <= 25000x reference
=> passed    student <=  2500x reference
=> passed    student <=   250x reference

Test 3a-c: time length() and ancestor() with random sets of 5 vertices
  *  digraph-wordnet.txt
     -  reference solution calls per second:   40110.67
     -  student   solution calls per second:    1352.67
     -  reference / student ratio:                29.65

=> passed    student <= 10000x reference
=> passed    student <=  1000x reference
=> passed    student <=   100x reference


Total: 7/7 tests passed!

================================================================



******************************************************************************
*  timing (substituting reference SAP.java)
******************************************************************************

Timing WordNet
*-----------------------------------------------------------
Running 8 total tests.

Test 1: timing WordNet constructor
  *  synsets = synsets.txt; hypernyms = hypernyms.txt
     -  student constructor time =  2.22 seconds
     -  maximum allowed     time = 10.00 seconds
==> passed

Test 2: check that exactly one SAP object created per WordNet object
==> passed

Test 3a-c: timing sap() and distance() with random nouns
  *  synsets = synsets.txt; hypernyms = hypernyms.txt
     -  reference solution calls per second:   43276.20
     -  student   solution calls per second:   65250.00
     -  reference / student ratio:                 0.66

=> passed    student <= 10000x reference
=> passed    student <=  1000x reference
=> passed    student <=   100x reference
=> passed    student <=    10x reference
=> passed    student <=     5x reference

Test 4: timing isNoun() with random nouns
  *  synsets = synsets.txt; hypernyms = hypernyms.txt
     -  reference solution calls per second:  379036.00
     -  student   solution calls per second:  581883.00
     -  reference / student ratio:                 0.65
     -  allowed ratio:                             2.00
==> passed

Total: 8/8 tests passed!

================================================================



******************************************************************************
*  timing (with reference SAP.java and WordNet.java)
******************************************************************************

Timing Outcast
*-----------------------------------------------------------
Running 1 total tests.

3.27 seconds to build WordNet

Computing time to find outcasts. Total time must not exceed 5 seconds.


    filename       N     time
-----------------------------
   outcast4.txt    4     0.01
   outcast5.txt    5     0.01
  outcast5a.txt    5     0.02
   outcast5.txt    5     0.01
   outcast7.txt    7     0.01
   outcast8.txt    8     0.02
  outcast8a.txt    8     0.01
  outcast8b.txt    8     0.02
  outcast8c.txt    8     0.02
   outcast9.txt    9     0.01
  outcast9a.txt    9     0.01
  outcast10.txt   10     0.01
 outcast10a.txt   10     0.01
  outcast11.txt   11     0.01
  outcast12.txt   12     0.01
 outcast12a.txt   12     0.00
  outcast20.txt   20     0.02
  outcast29.txt   29     0.25
=> passed, total elapsed time: 0.45

Total: 1/1 tests passed!

================================================================




